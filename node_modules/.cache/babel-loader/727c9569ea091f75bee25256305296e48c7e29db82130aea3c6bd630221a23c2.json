{"ast":null,"code":"/**\r\n * Load data from local storage\r\n * @returns {Object|null} The stored data or null if none exists\r\n */\nexport const loadDataFromLocalStorage = () => {\n  try {\n    const data = localStorage.getItem('expense_tracker_data');\n    return data ? JSON.parse(data) : null;\n  } catch (error) {\n    console.error(\"Error loading data from localStorage:\", error);\n    return null;\n  }\n};\n\n/**\r\n * Save data to local storage\r\n * @param {Object} data The data to save\r\n */\nexport const saveDataToLocalStorage = data => {\n  try {\n    localStorage.setItem('expense_tracker_data', JSON.stringify(data));\n  } catch (error) {\n    console.error('Error saving data to localStorage:', error);\n  }\n};\n\n/**\r\n * Calculate total expenses\r\n * @param {Array} expenses The array of expenses\r\n * @returns {number} The total amount\r\n */\nexport const calculateTotalExpenses = expenses => {\n  return expenses.reduce((total, expense) => total + parseFloat(expense.amount), 0);\n};\n\n/**\r\n * Calculate category totals\r\n * @param {Array} expenses The array of expenses\r\n * @returns {Object} An object with category totals\r\n/**\r\n* Calculate category totals\r\n* @param {Array} expenses The array of expenses\r\n* @returns {Object} An object with category totals\r\n*/\nexport const calculateCategoryTotals = expenses => {\n  const result = {\n    food: 0,\n    entertainment: 0,\n    travel: 0,\n    study: 0,\n    utilities: 0,\n    electronics: 0,\n    other: 0\n  };\n  expenses.forEach(expense => {\n    const category = expense.category ? expense.category.toLowerCase() : 'other';\n    if (result.hasOwnProperty(category)) {\n      result[category] += parseFloat(expense.amount);\n    } else {\n      result.other += parseFloat(expense.amount);\n    }\n  });\n  return result;\n};","map":{"version":3,"names":["loadDataFromLocalStorage","data","localStorage","getItem","JSON","parse","error","console","saveDataToLocalStorage","setItem","stringify","calculateTotalExpenses","expenses","reduce","total","expense","parseFloat","amount","calculateCategoryTotals","result","food","entertainment","travel","study","utilities","electronics","other","forEach","category","toLowerCase","hasOwnProperty"],"sources":["D:/GitHub/expense-tracker/expense-tracker/src/lib/storage.js"],"sourcesContent":["/**\r\n * Load data from local storage\r\n * @returns {Object|null} The stored data or null if none exists\r\n */\r\nexport const loadDataFromLocalStorage = () => {\r\n    try {\r\n      const data = localStorage.getItem('expense_tracker_data');\r\n      return data ? JSON.parse(data) : null;\r\n    } catch (error) {\r\n      console.error(\"Error loading data from localStorage:\", error);\r\n      return null;\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Save data to local storage\r\n   * @param {Object} data The data to save\r\n   */\r\n  export const saveDataToLocalStorage = (data) => {\r\n    try {\r\n      localStorage.setItem('expense_tracker_data', JSON.stringify(data));\r\n    } catch (error) {\r\n      console.error('Error saving data to localStorage:', error);\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Calculate total expenses\r\n   * @param {Array} expenses The array of expenses\r\n   * @returns {number} The total amount\r\n   */\r\n  export const calculateTotalExpenses = (expenses) => {\r\n    return expenses.reduce((total, expense) => total + parseFloat(expense.amount), 0);\r\n  };\r\n  \r\n  /**\r\n   * Calculate category totals\r\n   * @param {Array} expenses The array of expenses\r\n   * @returns {Object} An object with category totals\r\n  /**\r\n * Calculate category totals\r\n * @param {Array} expenses The array of expenses\r\n * @returns {Object} An object with category totals\r\n */\r\nexport const calculateCategoryTotals = (expenses) => {\r\n    const result = {\r\n      food: 0,\r\n      entertainment: 0,\r\n      travel: 0,\r\n      study: 0,\r\n      utilities: 0,\r\n      electronics: 0,\r\n      other: 0\r\n    };\r\n    \r\n    expenses.forEach(expense => {\r\n      const category = expense.category ? expense.category.toLowerCase() : 'other';\r\n      if (result.hasOwnProperty(category)) {\r\n        result[category] += parseFloat(expense.amount);\r\n      } else {\r\n        result.other += parseFloat(expense.amount);\r\n      }\r\n    });\r\n    \r\n    return result;\r\n  };"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,MAAMA,wBAAwB,GAAGA,CAAA,KAAM;EAC1C,IAAI;IACF,MAAMC,IAAI,GAAGC,YAAY,CAACC,OAAO,CAAC,sBAAsB,CAAC;IACzD,OAAOF,IAAI,GAAGG,IAAI,CAACC,KAAK,CAACJ,IAAI,CAAC,GAAG,IAAI;EACvC,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;IAC7D,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACF;AACA;AACA;AACE,OAAO,MAAME,sBAAsB,GAAIP,IAAI,IAAK;EAC9C,IAAI;IACFC,YAAY,CAACO,OAAO,CAAC,sBAAsB,EAAEL,IAAI,CAACM,SAAS,CAACT,IAAI,CAAC,CAAC;EACpE,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;EAC5D;AACF,CAAC;;AAED;AACF;AACA;AACA;AACA;AACE,OAAO,MAAMK,sBAAsB,GAAIC,QAAQ,IAAK;EAClD,OAAOA,QAAQ,CAACC,MAAM,CAAC,CAACC,KAAK,EAAEC,OAAO,KAAKD,KAAK,GAAGE,UAAU,CAACD,OAAO,CAACE,MAAM,CAAC,EAAE,CAAC,CAAC;AACnF,CAAC;;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,uBAAuB,GAAIN,QAAQ,IAAK;EACjD,MAAMO,MAAM,GAAG;IACbC,IAAI,EAAE,CAAC;IACPC,aAAa,EAAE,CAAC;IAChBC,MAAM,EAAE,CAAC;IACTC,KAAK,EAAE,CAAC;IACRC,SAAS,EAAE,CAAC;IACZC,WAAW,EAAE,CAAC;IACdC,KAAK,EAAE;EACT,CAAC;EAEDd,QAAQ,CAACe,OAAO,CAACZ,OAAO,IAAI;IAC1B,MAAMa,QAAQ,GAAGb,OAAO,CAACa,QAAQ,GAAGb,OAAO,CAACa,QAAQ,CAACC,WAAW,CAAC,CAAC,GAAG,OAAO;IAC5E,IAAIV,MAAM,CAACW,cAAc,CAACF,QAAQ,CAAC,EAAE;MACnCT,MAAM,CAACS,QAAQ,CAAC,IAAIZ,UAAU,CAACD,OAAO,CAACE,MAAM,CAAC;IAChD,CAAC,MAAM;MACLE,MAAM,CAACO,KAAK,IAAIV,UAAU,CAACD,OAAO,CAACE,MAAM,CAAC;IAC5C;EACF,CAAC,CAAC;EAEF,OAAOE,MAAM;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}