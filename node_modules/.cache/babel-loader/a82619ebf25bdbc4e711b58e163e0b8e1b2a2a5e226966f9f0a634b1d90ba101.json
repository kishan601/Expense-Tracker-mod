{"ast":null,"code":"var _jsxFileName = \"D:\\\\GitHub\\\\expense-tracker\\\\expense-tracker\\\\src\\\\pages\\\\Home.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { format } from 'date-fns';\nimport { Link } from 'react-router-dom';\nimport ExpenseTracker from '../components/ExpenseTracker';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { loadDataFromLocalStorage, saveDataToLocalStorage } from '../lib/storage';\nimport './Home.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Home({\n  darkMode,\n  setDarkMode\n}) {\n  _s();\n  const [isLoading, setIsLoading] = useState(true);\n  const [wallet, setWallet] = useState({\n    id: 1,\n    balance: \"5000\"\n  });\n  const [expenses, setExpenses] = useState([]);\n\n  // Load initial data\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Try to load from localStorage first as a fallback\n        const localData = loadDataFromLocalStorage();\n        if (localData) {\n          setWallet(localData.wallet);\n          setExpenses(localData.expenses);\n        }\n\n        // Then try to fetch from API\n        try {\n          const walletResponse = await fetch('/api/wallet');\n          const expensesResponse = await fetch('/api/expenses');\n          if (walletResponse.ok && expensesResponse.ok) {\n            const walletData = await walletResponse.json();\n            const expensesData = await expensesResponse.json();\n            setWallet(walletData);\n            setExpenses(expensesData);\n\n            // Save to localStorage for offline use\n            saveDataToLocalStorage({\n              wallet: walletData,\n              expenses: expensesData\n            });\n          }\n        } catch (apiError) {\n          console.error(\"API error:\", apiError);\n          // API failed but we already loaded from localStorage if available\n        }\n      } catch (error) {\n        console.error(\"Error loading data:\", error);\n        toast.error(\"Failed to load data\");\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // Add income handler\n  const handleAddIncome = async amount => {\n    try {\n      // First update local state optimistically\n      const newBalance = parseFloat(wallet.balance) + amount;\n      const updatedWallet = {\n        ...wallet,\n        balance: newBalance.toString()\n      };\n      setWallet(updatedWallet);\n\n      // Save to localStorage\n      saveDataToLocalStorage({\n        wallet: updatedWallet,\n        expenses\n      });\n\n      // Then try API\n      try {\n        const response = await fetch('/api/wallet/income', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            amount\n          })\n        });\n        if (response.ok) {\n          const serverWallet = await response.json();\n          setWallet(serverWallet);\n          saveDataToLocalStorage({\n            wallet: serverWallet,\n            expenses\n          });\n        }\n      } catch (apiError) {\n        console.error(\"API error when adding income:\", apiError);\n        // We already updated locally, so no need to revert\n      }\n      toast.success(\"Income added successfully\");\n    } catch (error) {\n      console.error(\"Error adding income:\", error);\n      toast.error(\"Failed to add income\");\n    }\n  };\n\n  // Add expense handler\n  const handleAddExpense = async data => {\n    try {\n      // Create a new expense with temporary ID\n      const newExpense = {\n        id: Date.now(),\n        // temp ID\n        ...data,\n        amount: parseFloat(data.amount),\n        created_at: new Date()\n      };\n\n      // Update state optimistically\n      setExpenses(prev => [newExpense, ...prev]);\n\n      // Update wallet balance\n      const newBalance = parseFloat(wallet.balance) - parseFloat(data.amount);\n      if (newBalance < 0) {\n        toast.error(\"Insufficient funds in wallet\");\n        setExpenses(prev => prev.filter(e => e.id !== newExpense.id));\n        return;\n      }\n      const updatedWallet = {\n        ...wallet,\n        balance: newBalance.toString()\n      };\n      setWallet(updatedWallet);\n\n      // Save to localStorage\n      saveDataToLocalStorage({\n        wallet: updatedWallet,\n        expenses: [newExpense, ...expenses]\n      });\n\n      // Then try API\n      try {\n        const response = await fetch('/api/expenses', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(data)\n        });\n        if (response.ok) {\n          const serverExpense = await response.json();\n\n          // Replace temp expense with server one\n          setExpenses(prev => prev.map(e => e.id === newExpense.id ? serverExpense : e));\n\n          // Get updated wallet from server\n          const walletResponse = await fetch('/api/wallet');\n          if (walletResponse.ok) {\n            const serverWallet = await walletResponse.json();\n            setWallet(serverWallet);\n\n            // Update localStorage\n            saveDataToLocalStorage({\n              wallet: serverWallet,\n              expenses: expenses.map(e => e.id === newExpense.id ? serverExpense : e)\n            });\n          }\n        } else {\n          // Revert changes if API fails\n          setExpenses(prev => prev.filter(e => e.id !== newExpense.id));\n          setWallet(wallet);\n          const errorData = await response.json();\n          throw new Error(errorData.message || 'Failed to add expense');\n        }\n      } catch (apiError) {\n        console.error(\"API error when adding expense:\", apiError);\n        // Already reverted changes above if API failed\n      }\n      toast.success(\"Expense added successfully\");\n    } catch (error) {\n      console.error(\"Error adding expense:\", error);\n      toast.error(error.message || \"Failed to add expense\");\n    }\n  };\n\n  // Update expense handler\n  const handleUpdateExpense = async (id, data) => {\n    try {\n      // Find the expense to update\n      const expenseToUpdate = expenses.find(e => e.id === id);\n      if (!expenseToUpdate) {\n        toast.error(\"Expense not found\");\n        return;\n      }\n\n      // Calculate wallet balance change\n      const oldAmount = parseFloat(expenseToUpdate.amount);\n      const newAmount = parseFloat(data.amount || oldAmount);\n      const amountDiff = oldAmount - newAmount;\n\n      // Create updated expense\n      const updatedExpense = {\n        ...expenseToUpdate,\n        ...data\n      };\n\n      // Update state optimistically\n      setExpenses(prev => prev.map(expense => expense.id === id ? updatedExpense : expense));\n\n      // Update wallet if amount changed\n      if (amountDiff !== 0) {\n        const newBalance = parseFloat(wallet.balance) + amountDiff;\n        if (newBalance < 0) {\n          toast.error(\"Insufficient funds in wallet\");\n          setExpenses(prev => prev.map(expense => expense.id === id ? expenseToUpdate : expense));\n          return;\n        }\n        const updatedWallet = {\n          ...wallet,\n          balance: newBalance.toString()\n        };\n        setWallet(updatedWallet);\n\n        // Save to localStorage\n        saveDataToLocalStorage({\n          wallet: updatedWallet,\n          expenses: expenses.map(expense => expense.id === id ? updatedExpense : expense)\n        });\n      }\n\n      // Then try API\n      try {\n        const response = await fetch(`/api/expenses/${id}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(data)\n        });\n        if (response.ok) {\n          const serverExpense = await response.json();\n\n          // Update with server data\n          setExpenses(prev => prev.map(e => e.id === id ? serverExpense : e));\n\n          // Get updated wallet from server\n          const walletResponse = await fetch('/api/wallet');\n          if (walletResponse.ok) {\n            const serverWallet = await walletResponse.json();\n            setWallet(serverWallet);\n\n            // Update localStorage\n            saveDataToLocalStorage({\n              wallet: serverWallet,\n              expenses: expenses.map(e => e.id === id ? serverExpense : e)\n            });\n          }\n        } else {\n          // Revert changes if API fails\n          setExpenses(prev => prev.map(e => e.id === id ? expenseToUpdate : e));\n          const errorData = await response.json();\n          throw new Error(errorData.message || 'Failed to update expense');\n        }\n      } catch (apiError) {\n        console.error(\"API error when updating expense:\", apiError);\n        // Already reverted changes above if API failed\n      }\n      toast.success(\"Expense updated successfully\");\n    } catch (error) {\n      console.error(\"Error updating expense:\", error);\n      toast.error(error.message || \"Failed to update expense\");\n    }\n  };\n\n  // Delete expense handler\n  const handleDeleteExpense = async id => {\n    try {\n      // Find the expense to delete\n      const expenseToDelete = expenses.find(e => e.id === id);\n      if (!expenseToDelete) {\n        toast.error(\"Expense not found\");\n        return;\n      }\n\n      // Update state optimistically\n      setExpenses(prev => prev.filter(expense => expense.id !== id));\n\n      // Restore amount to wallet\n      const newBalance = parseFloat(wallet.balance) + parseFloat(expenseToDelete.amount);\n      const updatedWallet = {\n        ...wallet,\n        balance: newBalance.toString()\n      };\n      setWallet(updatedWallet);\n\n      // Save to localStorage\n      saveDataToLocalStorage({\n        wallet: updatedWallet,\n        expenses: expenses.filter(expense => expense.id !== id)\n      });\n\n      // Then try API\n      try {\n        const response = await fetch(`/api/expenses/${id}`, {\n          method: 'DELETE'\n        });\n        if (response.ok) {\n          // Get updated wallet from server\n          const walletResponse = await fetch('/api/wallet');\n          if (walletResponse.ok) {\n            const serverWallet = await walletResponse.json();\n            setWallet(serverWallet);\n\n            // Update localStorage\n            saveDataToLocalStorage({\n              wallet: serverWallet,\n              expenses: expenses.filter(expense => expense.id !== id)\n            });\n          }\n        } else {\n          // Revert changes if API fails\n          setExpenses(prev => [...prev, expenseToDelete]);\n          setWallet(wallet);\n          throw new Error('Failed to delete expense');\n        }\n      } catch (apiError) {\n        console.error(\"API error when deleting expense:\", apiError);\n        // Already reverted changes above if API failed\n      }\n      toast.success(\"Expense deleted successfully\");\n    } catch (error) {\n      console.error(\"Error deleting expense:\", error);\n      toast.error(\"Failed to delete expense\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home-container\",\n    children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-container\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ExpenseTracker, {\n        wallet: wallet,\n        expenses: expenses,\n        onAddIncome: handleAddIncome,\n        onAddExpense: handleAddExpense,\n        onUpdateExpense: handleUpdateExpense,\n        onDeleteExpense: handleDeleteExpense,\n        darkMode: darkMode,\n        setDarkMode: setDarkMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {\n        position: \"bottom-right\",\n        theme: darkMode ? \"dark\" : \"light\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 327,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"qVKGvpKP1yP285P9yYtyeoMK8VU=\");\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","format","Link","ExpenseTracker","ToastContainer","toast","loadDataFromLocalStorage","saveDataToLocalStorage","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","darkMode","setDarkMode","_s","isLoading","setIsLoading","wallet","setWallet","id","balance","expenses","setExpenses","fetchData","localData","walletResponse","fetch","expensesResponse","ok","walletData","json","expensesData","apiError","console","error","handleAddIncome","amount","newBalance","parseFloat","updatedWallet","toString","response","method","headers","body","JSON","stringify","serverWallet","success","handleAddExpense","data","newExpense","Date","now","created_at","prev","filter","e","serverExpense","map","errorData","Error","message","handleUpdateExpense","expenseToUpdate","find","oldAmount","newAmount","amountDiff","updatedExpense","expense","handleDeleteExpense","expenseToDelete","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onAddIncome","onAddExpense","onUpdateExpense","onDeleteExpense","position","theme","_c","$RefreshReg$"],"sources":["D:/GitHub/expense-tracker/expense-tracker/src/pages/Home.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { format } from 'date-fns';\r\nimport { Link } from 'react-router-dom';\r\nimport ExpenseTracker from '../components/ExpenseTracker';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { \r\n  loadDataFromLocalStorage, \r\n  saveDataToLocalStorage \r\n} from '../lib/storage';\r\nimport './Home.css';\r\n\r\nexport default function Home({ darkMode, setDarkMode }) {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [wallet, setWallet] = useState({ id: 1, balance: \"5000\" });\r\n  const [expenses, setExpenses] = useState([]);\r\n\r\n  // Load initial data\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        // Try to load from localStorage first as a fallback\r\n        const localData = loadDataFromLocalStorage();\r\n        if (localData) {\r\n          setWallet(localData.wallet);\r\n          setExpenses(localData.expenses);\r\n        }\r\n        \r\n        // Then try to fetch from API\r\n        try {\r\n          const walletResponse = await fetch('/api/wallet');\r\n          const expensesResponse = await fetch('/api/expenses');\r\n          \r\n          if (walletResponse.ok && expensesResponse.ok) {\r\n            const walletData = await walletResponse.json();\r\n            const expensesData = await expensesResponse.json();\r\n            \r\n            setWallet(walletData);\r\n            setExpenses(expensesData);\r\n            \r\n            // Save to localStorage for offline use\r\n            saveDataToLocalStorage({ wallet: walletData, expenses: expensesData });\r\n          }\r\n        } catch (apiError) {\r\n          console.error(\"API error:\", apiError);\r\n          // API failed but we already loaded from localStorage if available\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error loading data:\", error);\r\n        toast.error(\"Failed to load data\");\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchData();\r\n  }, []);\r\n\r\n  // Add income handler\r\n  const handleAddIncome = async (amount) => {\r\n    try {\r\n      // First update local state optimistically\r\n      const newBalance = parseFloat(wallet.balance) + amount;\r\n      const updatedWallet = { ...wallet, balance: newBalance.toString() };\r\n      setWallet(updatedWallet);\r\n      \r\n      // Save to localStorage\r\n      saveDataToLocalStorage({ wallet: updatedWallet, expenses });\r\n      \r\n      // Then try API\r\n      try {\r\n        const response = await fetch('/api/wallet/income', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ amount }),\r\n        });\r\n        \r\n        if (response.ok) {\r\n          const serverWallet = await response.json();\r\n          setWallet(serverWallet);\r\n          saveDataToLocalStorage({ wallet: serverWallet, expenses });\r\n        }\r\n      } catch (apiError) {\r\n        console.error(\"API error when adding income:\", apiError);\r\n        // We already updated locally, so no need to revert\r\n      }\r\n      \r\n      toast.success(\"Income added successfully\");\r\n    } catch (error) {\r\n      console.error(\"Error adding income:\", error);\r\n      toast.error(\"Failed to add income\");\r\n    }\r\n  };\r\n\r\n  // Add expense handler\r\n  const handleAddExpense = async (data) => {\r\n    try {\r\n      // Create a new expense with temporary ID\r\n      const newExpense = {\r\n        id: Date.now(), // temp ID\r\n        ...data,\r\n        amount: parseFloat(data.amount),\r\n        created_at: new Date()\r\n      };\r\n      \r\n      // Update state optimistically\r\n      setExpenses(prev => [newExpense, ...prev]);\r\n      \r\n      // Update wallet balance\r\n      const newBalance = parseFloat(wallet.balance) - parseFloat(data.amount);\r\n      if (newBalance < 0) {\r\n        toast.error(\"Insufficient funds in wallet\");\r\n        setExpenses(prev => prev.filter(e => e.id !== newExpense.id));\r\n        return;\r\n      }\r\n      \r\n      const updatedWallet = { ...wallet, balance: newBalance.toString() };\r\n      setWallet(updatedWallet);\r\n      \r\n      // Save to localStorage\r\n      saveDataToLocalStorage({ \r\n        wallet: updatedWallet, \r\n        expenses: [newExpense, ...expenses] \r\n      });\r\n      \r\n      // Then try API\r\n      try {\r\n        const response = await fetch('/api/expenses', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(data),\r\n        });\r\n        \r\n        if (response.ok) {\r\n          const serverExpense = await response.json();\r\n          \r\n          // Replace temp expense with server one\r\n          setExpenses(prev => \r\n            prev.map(e => e.id === newExpense.id ? serverExpense : e)\r\n          );\r\n          \r\n          // Get updated wallet from server\r\n          const walletResponse = await fetch('/api/wallet');\r\n          if (walletResponse.ok) {\r\n            const serverWallet = await walletResponse.json();\r\n            setWallet(serverWallet);\r\n            \r\n            // Update localStorage\r\n            saveDataToLocalStorage({ \r\n              wallet: serverWallet, \r\n              expenses: expenses.map(e => e.id === newExpense.id ? serverExpense : e)\r\n            });\r\n          }\r\n        } else {\r\n          // Revert changes if API fails\r\n          setExpenses(prev => prev.filter(e => e.id !== newExpense.id));\r\n          setWallet(wallet);\r\n          const errorData = await response.json();\r\n          throw new Error(errorData.message || 'Failed to add expense');\r\n        }\r\n      } catch (apiError) {\r\n        console.error(\"API error when adding expense:\", apiError);\r\n        // Already reverted changes above if API failed\r\n      }\r\n      \r\n      toast.success(\"Expense added successfully\");\r\n    } catch (error) {\r\n      console.error(\"Error adding expense:\", error);\r\n      toast.error(error.message || \"Failed to add expense\");\r\n    }\r\n  };\r\n\r\n  // Update expense handler\r\n  const handleUpdateExpense = async (id, data) => {\r\n    try {\r\n      // Find the expense to update\r\n      const expenseToUpdate = expenses.find(e => e.id === id);\r\n      if (!expenseToUpdate) {\r\n        toast.error(\"Expense not found\");\r\n        return;\r\n      }\r\n      \r\n      // Calculate wallet balance change\r\n      const oldAmount = parseFloat(expenseToUpdate.amount);\r\n      const newAmount = parseFloat(data.amount || oldAmount);\r\n      const amountDiff = oldAmount - newAmount;\r\n      \r\n      // Create updated expense\r\n      const updatedExpense = { ...expenseToUpdate, ...data };\r\n      \r\n      // Update state optimistically\r\n      setExpenses(prev => \r\n        prev.map(expense => expense.id === id ? updatedExpense : expense)\r\n      );\r\n      \r\n      // Update wallet if amount changed\r\n      if (amountDiff !== 0) {\r\n        const newBalance = parseFloat(wallet.balance) + amountDiff;\r\n        if (newBalance < 0) {\r\n          toast.error(\"Insufficient funds in wallet\");\r\n          setExpenses(prev => \r\n            prev.map(expense => expense.id === id ? expenseToUpdate : expense)\r\n          );\r\n          return;\r\n        }\r\n        \r\n        const updatedWallet = { ...wallet, balance: newBalance.toString() };\r\n        setWallet(updatedWallet);\r\n        \r\n        // Save to localStorage\r\n        saveDataToLocalStorage({ \r\n          wallet: updatedWallet, \r\n          expenses: expenses.map(expense => \r\n            expense.id === id ? updatedExpense : expense\r\n          ) \r\n        });\r\n      }\r\n      \r\n      // Then try API\r\n      try {\r\n        const response = await fetch(`/api/expenses/${id}`, {\r\n          method: 'PUT',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(data),\r\n        });\r\n        \r\n        if (response.ok) {\r\n          const serverExpense = await response.json();\r\n          \r\n          // Update with server data\r\n          setExpenses(prev => \r\n            prev.map(e => e.id === id ? serverExpense : e)\r\n          );\r\n          \r\n          // Get updated wallet from server\r\n          const walletResponse = await fetch('/api/wallet');\r\n          if (walletResponse.ok) {\r\n            const serverWallet = await walletResponse.json();\r\n            setWallet(serverWallet);\r\n            \r\n            // Update localStorage\r\n            saveDataToLocalStorage({ \r\n              wallet: serverWallet, \r\n              expenses: expenses.map(e => e.id === id ? serverExpense : e)\r\n            });\r\n          }\r\n        } else {\r\n          // Revert changes if API fails\r\n          setExpenses(prev => prev.map(e => e.id === id ? expenseToUpdate : e));\r\n          const errorData = await response.json();\r\n          throw new Error(errorData.message || 'Failed to update expense');\r\n        }\r\n      } catch (apiError) {\r\n        console.error(\"API error when updating expense:\", apiError);\r\n        // Already reverted changes above if API failed\r\n      }\r\n      \r\n      toast.success(\"Expense updated successfully\");\r\n    } catch (error) {\r\n      console.error(\"Error updating expense:\", error);\r\n      toast.error(error.message || \"Failed to update expense\");\r\n    }\r\n  };\r\n\r\n  // Delete expense handler\r\n  const handleDeleteExpense = async (id) => {\r\n    try {\r\n      // Find the expense to delete\r\n      const expenseToDelete = expenses.find(e => e.id === id);\r\n      if (!expenseToDelete) {\r\n        toast.error(\"Expense not found\");\r\n        return;\r\n      }\r\n      \r\n      // Update state optimistically\r\n      setExpenses(prev => prev.filter(expense => expense.id !== id));\r\n      \r\n      // Restore amount to wallet\r\n      const newBalance = parseFloat(wallet.balance) + parseFloat(expenseToDelete.amount);\r\n      const updatedWallet = { ...wallet, balance: newBalance.toString() };\r\n      setWallet(updatedWallet);\r\n      \r\n      // Save to localStorage\r\n      saveDataToLocalStorage({ \r\n        wallet: updatedWallet, \r\n        expenses: expenses.filter(expense => expense.id !== id) \r\n      });\r\n      \r\n      // Then try API\r\n      try {\r\n        const response = await fetch(`/api/expenses/${id}`, {\r\n          method: 'DELETE',\r\n        });\r\n        \r\n        if (response.ok) {\r\n          // Get updated wallet from server\r\n          const walletResponse = await fetch('/api/wallet');\r\n          if (walletResponse.ok) {\r\n            const serverWallet = await walletResponse.json();\r\n            setWallet(serverWallet);\r\n            \r\n            // Update localStorage\r\n            saveDataToLocalStorage({ \r\n              wallet: serverWallet, \r\n              expenses: expenses.filter(expense => expense.id !== id)\r\n            });\r\n          }\r\n        } else {\r\n          // Revert changes if API fails\r\n          setExpenses(prev => [...prev, expenseToDelete]);\r\n          setWallet(wallet);\r\n          throw new Error('Failed to delete expense');\r\n        }\r\n      } catch (apiError) {\r\n        console.error(\"API error when deleting expense:\", apiError);\r\n        // Already reverted changes above if API failed\r\n      }\r\n      \r\n      toast.success(\"Expense deleted successfully\");\r\n    } catch (error) {\r\n      console.error(\"Error deleting expense:\", error);\r\n      toast.error(\"Failed to delete expense\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"home-container\">\r\n      {isLoading ? (\r\n        <div className=\"loading-container\">\r\n          <p>Loading...</p>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <ExpenseTracker\r\n            wallet={wallet}\r\n            expenses={expenses}\r\n            onAddIncome={handleAddIncome}\r\n            onAddExpense={handleAddExpense}\r\n            onUpdateExpense={handleUpdateExpense}\r\n            onDeleteExpense={handleDeleteExpense}\r\n            darkMode={darkMode}\r\n            setDarkMode={setDarkMode}\r\n          />\r\n          <ToastContainer position=\"bottom-right\" theme={darkMode ? \"dark\" : \"light\"} />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,MAAM,QAAQ,UAAU;AACjC,SAASC,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,cAAc,MAAM,8BAA8B;AACzD,SAASC,cAAc,EAAEC,KAAK,QAAQ,gBAAgB;AACtD,OAAO,uCAAuC;AAC9C,SACEC,wBAAwB,EACxBC,sBAAsB,QACjB,gBAAgB;AACvB,OAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEpB,eAAe,SAASC,IAAIA,CAAC;EAAEC,QAAQ;EAAEC;AAAY,CAAC,EAAE;EAAAC,EAAA;EACtD,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACmB,MAAM,EAAEC,SAAS,CAAC,GAAGpB,QAAQ,CAAC;IAAEqB,EAAE,EAAE,CAAC;IAAEC,OAAO,EAAE;EAAO,CAAC,CAAC;EAChE,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMwB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF;QACA,MAAMC,SAAS,GAAGnB,wBAAwB,CAAC,CAAC;QAC5C,IAAImB,SAAS,EAAE;UACbN,SAAS,CAACM,SAAS,CAACP,MAAM,CAAC;UAC3BK,WAAW,CAACE,SAAS,CAACH,QAAQ,CAAC;QACjC;;QAEA;QACA,IAAI;UACF,MAAMI,cAAc,GAAG,MAAMC,KAAK,CAAC,aAAa,CAAC;UACjD,MAAMC,gBAAgB,GAAG,MAAMD,KAAK,CAAC,eAAe,CAAC;UAErD,IAAID,cAAc,CAACG,EAAE,IAAID,gBAAgB,CAACC,EAAE,EAAE;YAC5C,MAAMC,UAAU,GAAG,MAAMJ,cAAc,CAACK,IAAI,CAAC,CAAC;YAC9C,MAAMC,YAAY,GAAG,MAAMJ,gBAAgB,CAACG,IAAI,CAAC,CAAC;YAElDZ,SAAS,CAACW,UAAU,CAAC;YACrBP,WAAW,CAACS,YAAY,CAAC;;YAEzB;YACAzB,sBAAsB,CAAC;cAAEW,MAAM,EAAEY,UAAU;cAAER,QAAQ,EAAEU;YAAa,CAAC,CAAC;UACxE;QACF,CAAC,CAAC,OAAOC,QAAQ,EAAE;UACjBC,OAAO,CAACC,KAAK,CAAC,YAAY,EAAEF,QAAQ,CAAC;UACrC;QACF;MACF,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;QAC3C9B,KAAK,CAAC8B,KAAK,CAAC,qBAAqB,CAAC;MACpC,CAAC,SAAS;QACRlB,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAEDO,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMY,eAAe,GAAG,MAAOC,MAAM,IAAK;IACxC,IAAI;MACF;MACA,MAAMC,UAAU,GAAGC,UAAU,CAACrB,MAAM,CAACG,OAAO,CAAC,GAAGgB,MAAM;MACtD,MAAMG,aAAa,GAAG;QAAE,GAAGtB,MAAM;QAAEG,OAAO,EAAEiB,UAAU,CAACG,QAAQ,CAAC;MAAE,CAAC;MACnEtB,SAAS,CAACqB,aAAa,CAAC;;MAExB;MACAjC,sBAAsB,CAAC;QAAEW,MAAM,EAAEsB,aAAa;QAAElB;MAAS,CAAC,CAAC;;MAE3D;MACA,IAAI;QACF,MAAMoB,QAAQ,GAAG,MAAMf,KAAK,CAAC,oBAAoB,EAAE;UACjDgB,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YAAE,cAAc,EAAE;UAAmB,CAAC;UAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEV;UAAO,CAAC;QACjC,CAAC,CAAC;QAEF,IAAIK,QAAQ,CAACb,EAAE,EAAE;UACf,MAAMmB,YAAY,GAAG,MAAMN,QAAQ,CAACX,IAAI,CAAC,CAAC;UAC1CZ,SAAS,CAAC6B,YAAY,CAAC;UACvBzC,sBAAsB,CAAC;YAAEW,MAAM,EAAE8B,YAAY;YAAE1B;UAAS,CAAC,CAAC;QAC5D;MACF,CAAC,CAAC,OAAOW,QAAQ,EAAE;QACjBC,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAEF,QAAQ,CAAC;QACxD;MACF;MAEA5B,KAAK,CAAC4C,OAAO,CAAC,2BAA2B,CAAC;IAC5C,CAAC,CAAC,OAAOd,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C9B,KAAK,CAAC8B,KAAK,CAAC,sBAAsB,CAAC;IACrC;EACF,CAAC;;EAED;EACA,MAAMe,gBAAgB,GAAG,MAAOC,IAAI,IAAK;IACvC,IAAI;MACF;MACA,MAAMC,UAAU,GAAG;QACjBhC,EAAE,EAAEiC,IAAI,CAACC,GAAG,CAAC,CAAC;QAAE;QAChB,GAAGH,IAAI;QACPd,MAAM,EAAEE,UAAU,CAACY,IAAI,CAACd,MAAM,CAAC;QAC/BkB,UAAU,EAAE,IAAIF,IAAI,CAAC;MACvB,CAAC;;MAED;MACA9B,WAAW,CAACiC,IAAI,IAAI,CAACJ,UAAU,EAAE,GAAGI,IAAI,CAAC,CAAC;;MAE1C;MACA,MAAMlB,UAAU,GAAGC,UAAU,CAACrB,MAAM,CAACG,OAAO,CAAC,GAAGkB,UAAU,CAACY,IAAI,CAACd,MAAM,CAAC;MACvE,IAAIC,UAAU,GAAG,CAAC,EAAE;QAClBjC,KAAK,CAAC8B,KAAK,CAAC,8BAA8B,CAAC;QAC3CZ,WAAW,CAACiC,IAAI,IAAIA,IAAI,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACtC,EAAE,KAAKgC,UAAU,CAAChC,EAAE,CAAC,CAAC;QAC7D;MACF;MAEA,MAAMoB,aAAa,GAAG;QAAE,GAAGtB,MAAM;QAAEG,OAAO,EAAEiB,UAAU,CAACG,QAAQ,CAAC;MAAE,CAAC;MACnEtB,SAAS,CAACqB,aAAa,CAAC;;MAExB;MACAjC,sBAAsB,CAAC;QACrBW,MAAM,EAAEsB,aAAa;QACrBlB,QAAQ,EAAE,CAAC8B,UAAU,EAAE,GAAG9B,QAAQ;MACpC,CAAC,CAAC;;MAEF;MACA,IAAI;QACF,MAAMoB,QAAQ,GAAG,MAAMf,KAAK,CAAC,eAAe,EAAE;UAC5CgB,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YAAE,cAAc,EAAE;UAAmB,CAAC;UAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACI,IAAI;QAC3B,CAAC,CAAC;QAEF,IAAIT,QAAQ,CAACb,EAAE,EAAE;UACf,MAAM8B,aAAa,GAAG,MAAMjB,QAAQ,CAACX,IAAI,CAAC,CAAC;;UAE3C;UACAR,WAAW,CAACiC,IAAI,IACdA,IAAI,CAACI,GAAG,CAACF,CAAC,IAAIA,CAAC,CAACtC,EAAE,KAAKgC,UAAU,CAAChC,EAAE,GAAGuC,aAAa,GAAGD,CAAC,CAC1D,CAAC;;UAED;UACA,MAAMhC,cAAc,GAAG,MAAMC,KAAK,CAAC,aAAa,CAAC;UACjD,IAAID,cAAc,CAACG,EAAE,EAAE;YACrB,MAAMmB,YAAY,GAAG,MAAMtB,cAAc,CAACK,IAAI,CAAC,CAAC;YAChDZ,SAAS,CAAC6B,YAAY,CAAC;;YAEvB;YACAzC,sBAAsB,CAAC;cACrBW,MAAM,EAAE8B,YAAY;cACpB1B,QAAQ,EAAEA,QAAQ,CAACsC,GAAG,CAACF,CAAC,IAAIA,CAAC,CAACtC,EAAE,KAAKgC,UAAU,CAAChC,EAAE,GAAGuC,aAAa,GAAGD,CAAC;YACxE,CAAC,CAAC;UACJ;QACF,CAAC,MAAM;UACL;UACAnC,WAAW,CAACiC,IAAI,IAAIA,IAAI,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACtC,EAAE,KAAKgC,UAAU,CAAChC,EAAE,CAAC,CAAC;UAC7DD,SAAS,CAACD,MAAM,CAAC;UACjB,MAAM2C,SAAS,GAAG,MAAMnB,QAAQ,CAACX,IAAI,CAAC,CAAC;UACvC,MAAM,IAAI+B,KAAK,CAACD,SAAS,CAACE,OAAO,IAAI,uBAAuB,CAAC;QAC/D;MACF,CAAC,CAAC,OAAO9B,QAAQ,EAAE;QACjBC,OAAO,CAACC,KAAK,CAAC,gCAAgC,EAAEF,QAAQ,CAAC;QACzD;MACF;MAEA5B,KAAK,CAAC4C,OAAO,CAAC,4BAA4B,CAAC;IAC7C,CAAC,CAAC,OAAOd,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C9B,KAAK,CAAC8B,KAAK,CAACA,KAAK,CAAC4B,OAAO,IAAI,uBAAuB,CAAC;IACvD;EACF,CAAC;;EAED;EACA,MAAMC,mBAAmB,GAAG,MAAAA,CAAO5C,EAAE,EAAE+B,IAAI,KAAK;IAC9C,IAAI;MACF;MACA,MAAMc,eAAe,GAAG3C,QAAQ,CAAC4C,IAAI,CAACR,CAAC,IAAIA,CAAC,CAACtC,EAAE,KAAKA,EAAE,CAAC;MACvD,IAAI,CAAC6C,eAAe,EAAE;QACpB5D,KAAK,CAAC8B,KAAK,CAAC,mBAAmB,CAAC;QAChC;MACF;;MAEA;MACA,MAAMgC,SAAS,GAAG5B,UAAU,CAAC0B,eAAe,CAAC5B,MAAM,CAAC;MACpD,MAAM+B,SAAS,GAAG7B,UAAU,CAACY,IAAI,CAACd,MAAM,IAAI8B,SAAS,CAAC;MACtD,MAAME,UAAU,GAAGF,SAAS,GAAGC,SAAS;;MAExC;MACA,MAAME,cAAc,GAAG;QAAE,GAAGL,eAAe;QAAE,GAAGd;MAAK,CAAC;;MAEtD;MACA5B,WAAW,CAACiC,IAAI,IACdA,IAAI,CAACI,GAAG,CAACW,OAAO,IAAIA,OAAO,CAACnD,EAAE,KAAKA,EAAE,GAAGkD,cAAc,GAAGC,OAAO,CAClE,CAAC;;MAED;MACA,IAAIF,UAAU,KAAK,CAAC,EAAE;QACpB,MAAM/B,UAAU,GAAGC,UAAU,CAACrB,MAAM,CAACG,OAAO,CAAC,GAAGgD,UAAU;QAC1D,IAAI/B,UAAU,GAAG,CAAC,EAAE;UAClBjC,KAAK,CAAC8B,KAAK,CAAC,8BAA8B,CAAC;UAC3CZ,WAAW,CAACiC,IAAI,IACdA,IAAI,CAACI,GAAG,CAACW,OAAO,IAAIA,OAAO,CAACnD,EAAE,KAAKA,EAAE,GAAG6C,eAAe,GAAGM,OAAO,CACnE,CAAC;UACD;QACF;QAEA,MAAM/B,aAAa,GAAG;UAAE,GAAGtB,MAAM;UAAEG,OAAO,EAAEiB,UAAU,CAACG,QAAQ,CAAC;QAAE,CAAC;QACnEtB,SAAS,CAACqB,aAAa,CAAC;;QAExB;QACAjC,sBAAsB,CAAC;UACrBW,MAAM,EAAEsB,aAAa;UACrBlB,QAAQ,EAAEA,QAAQ,CAACsC,GAAG,CAACW,OAAO,IAC5BA,OAAO,CAACnD,EAAE,KAAKA,EAAE,GAAGkD,cAAc,GAAGC,OACvC;QACF,CAAC,CAAC;MACJ;;MAEA;MACA,IAAI;QACF,MAAM7B,QAAQ,GAAG,MAAMf,KAAK,CAAC,iBAAiBP,EAAE,EAAE,EAAE;UAClDuB,MAAM,EAAE,KAAK;UACbC,OAAO,EAAE;YAAE,cAAc,EAAE;UAAmB,CAAC;UAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACI,IAAI;QAC3B,CAAC,CAAC;QAEF,IAAIT,QAAQ,CAACb,EAAE,EAAE;UACf,MAAM8B,aAAa,GAAG,MAAMjB,QAAQ,CAACX,IAAI,CAAC,CAAC;;UAE3C;UACAR,WAAW,CAACiC,IAAI,IACdA,IAAI,CAACI,GAAG,CAACF,CAAC,IAAIA,CAAC,CAACtC,EAAE,KAAKA,EAAE,GAAGuC,aAAa,GAAGD,CAAC,CAC/C,CAAC;;UAED;UACA,MAAMhC,cAAc,GAAG,MAAMC,KAAK,CAAC,aAAa,CAAC;UACjD,IAAID,cAAc,CAACG,EAAE,EAAE;YACrB,MAAMmB,YAAY,GAAG,MAAMtB,cAAc,CAACK,IAAI,CAAC,CAAC;YAChDZ,SAAS,CAAC6B,YAAY,CAAC;;YAEvB;YACAzC,sBAAsB,CAAC;cACrBW,MAAM,EAAE8B,YAAY;cACpB1B,QAAQ,EAAEA,QAAQ,CAACsC,GAAG,CAACF,CAAC,IAAIA,CAAC,CAACtC,EAAE,KAAKA,EAAE,GAAGuC,aAAa,GAAGD,CAAC;YAC7D,CAAC,CAAC;UACJ;QACF,CAAC,MAAM;UACL;UACAnC,WAAW,CAACiC,IAAI,IAAIA,IAAI,CAACI,GAAG,CAACF,CAAC,IAAIA,CAAC,CAACtC,EAAE,KAAKA,EAAE,GAAG6C,eAAe,GAAGP,CAAC,CAAC,CAAC;UACrE,MAAMG,SAAS,GAAG,MAAMnB,QAAQ,CAACX,IAAI,CAAC,CAAC;UACvC,MAAM,IAAI+B,KAAK,CAACD,SAAS,CAACE,OAAO,IAAI,0BAA0B,CAAC;QAClE;MACF,CAAC,CAAC,OAAO9B,QAAQ,EAAE;QACjBC,OAAO,CAACC,KAAK,CAAC,kCAAkC,EAAEF,QAAQ,CAAC;QAC3D;MACF;MAEA5B,KAAK,CAAC4C,OAAO,CAAC,8BAA8B,CAAC;IAC/C,CAAC,CAAC,OAAOd,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C9B,KAAK,CAAC8B,KAAK,CAACA,KAAK,CAAC4B,OAAO,IAAI,0BAA0B,CAAC;IAC1D;EACF,CAAC;;EAED;EACA,MAAMS,mBAAmB,GAAG,MAAOpD,EAAE,IAAK;IACxC,IAAI;MACF;MACA,MAAMqD,eAAe,GAAGnD,QAAQ,CAAC4C,IAAI,CAACR,CAAC,IAAIA,CAAC,CAACtC,EAAE,KAAKA,EAAE,CAAC;MACvD,IAAI,CAACqD,eAAe,EAAE;QACpBpE,KAAK,CAAC8B,KAAK,CAAC,mBAAmB,CAAC;QAChC;MACF;;MAEA;MACAZ,WAAW,CAACiC,IAAI,IAAIA,IAAI,CAACC,MAAM,CAACc,OAAO,IAAIA,OAAO,CAACnD,EAAE,KAAKA,EAAE,CAAC,CAAC;;MAE9D;MACA,MAAMkB,UAAU,GAAGC,UAAU,CAACrB,MAAM,CAACG,OAAO,CAAC,GAAGkB,UAAU,CAACkC,eAAe,CAACpC,MAAM,CAAC;MAClF,MAAMG,aAAa,GAAG;QAAE,GAAGtB,MAAM;QAAEG,OAAO,EAAEiB,UAAU,CAACG,QAAQ,CAAC;MAAE,CAAC;MACnEtB,SAAS,CAACqB,aAAa,CAAC;;MAExB;MACAjC,sBAAsB,CAAC;QACrBW,MAAM,EAAEsB,aAAa;QACrBlB,QAAQ,EAAEA,QAAQ,CAACmC,MAAM,CAACc,OAAO,IAAIA,OAAO,CAACnD,EAAE,KAAKA,EAAE;MACxD,CAAC,CAAC;;MAEF;MACA,IAAI;QACF,MAAMsB,QAAQ,GAAG,MAAMf,KAAK,CAAC,iBAAiBP,EAAE,EAAE,EAAE;UAClDuB,MAAM,EAAE;QACV,CAAC,CAAC;QAEF,IAAID,QAAQ,CAACb,EAAE,EAAE;UACf;UACA,MAAMH,cAAc,GAAG,MAAMC,KAAK,CAAC,aAAa,CAAC;UACjD,IAAID,cAAc,CAACG,EAAE,EAAE;YACrB,MAAMmB,YAAY,GAAG,MAAMtB,cAAc,CAACK,IAAI,CAAC,CAAC;YAChDZ,SAAS,CAAC6B,YAAY,CAAC;;YAEvB;YACAzC,sBAAsB,CAAC;cACrBW,MAAM,EAAE8B,YAAY;cACpB1B,QAAQ,EAAEA,QAAQ,CAACmC,MAAM,CAACc,OAAO,IAAIA,OAAO,CAACnD,EAAE,KAAKA,EAAE;YACxD,CAAC,CAAC;UACJ;QACF,CAAC,MAAM;UACL;UACAG,WAAW,CAACiC,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEiB,eAAe,CAAC,CAAC;UAC/CtD,SAAS,CAACD,MAAM,CAAC;UACjB,MAAM,IAAI4C,KAAK,CAAC,0BAA0B,CAAC;QAC7C;MACF,CAAC,CAAC,OAAO7B,QAAQ,EAAE;QACjBC,OAAO,CAACC,KAAK,CAAC,kCAAkC,EAAEF,QAAQ,CAAC;QAC3D;MACF;MAEA5B,KAAK,CAAC4C,OAAO,CAAC,8BAA8B,CAAC;IAC/C,CAAC,CAAC,OAAOd,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C9B,KAAK,CAAC8B,KAAK,CAAC,0BAA0B,CAAC;IACzC;EACF,CAAC;EAED,oBACE1B,OAAA;IAAKiE,SAAS,EAAC,gBAAgB;IAAAC,QAAA,EAC5B3D,SAAS,gBACRP,OAAA;MAAKiE,SAAS,EAAC,mBAAmB;MAAAC,QAAA,eAChClE,OAAA;QAAAkE,QAAA,EAAG;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACd,CAAC,gBAENtE,OAAA,CAAAE,SAAA;MAAAgE,QAAA,gBACElE,OAAA,CAACN,cAAc;QACbe,MAAM,EAAEA,MAAO;QACfI,QAAQ,EAAEA,QAAS;QACnB0D,WAAW,EAAE5C,eAAgB;QAC7B6C,YAAY,EAAE/B,gBAAiB;QAC/BgC,eAAe,EAAElB,mBAAoB;QACrCmB,eAAe,EAAEX,mBAAoB;QACrC3D,QAAQ,EAAEA,QAAS;QACnBC,WAAW,EAAEA;MAAY;QAAA8D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1B,CAAC,eACFtE,OAAA,CAACL,cAAc;QAACgF,QAAQ,EAAC,cAAc;QAACC,KAAK,EAAExE,QAAQ,GAAG,MAAM,GAAG;MAAQ;QAAA+D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA,eAC9E;EACH;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAChE,EAAA,CAhVuBH,IAAI;AAAA0E,EAAA,GAAJ1E,IAAI;AAAA,IAAA0E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}