{"ast":null,"code":"// src/streamedQuery.ts\nfunction streamedQuery({\n  queryFn,\n  refetchMode = \"reset\"\n}) {\n  return async context => {\n    const query = context.client.getQueryCache().find({\n      queryKey: context.queryKey,\n      exact: true\n    });\n    const isRefetch = !!query && query.state.data !== void 0;\n    if (isRefetch && refetchMode === \"reset\") {\n      query.setState({\n        status: \"pending\",\n        data: void 0,\n        error: null,\n        fetchStatus: \"fetching\"\n      });\n    }\n    const result = [];\n    const stream = await queryFn(context);\n    for await (const chunk of stream) {\n      if (context.signal.aborted) {\n        break;\n      }\n      if (!isRefetch || refetchMode !== \"replace\") {\n        context.client.setQueryData(context.queryKey, (prev = []) => {\n          return prev.concat([chunk]);\n        });\n      }\n      result.push(chunk);\n    }\n    if (isRefetch && refetchMode === \"replace\" && !context.signal.aborted) {\n      context.client.setQueryData(context.queryKey, result);\n    }\n    return context.client.getQueryData(context.queryKey);\n  };\n}\nexport { streamedQuery };","map":{"version":3,"names":["streamedQuery","queryFn","refetchMode","context","query","client","getQueryCache","find","queryKey","exact","isRefetch","state","data","setState","status","error","fetchStatus","result","stream","chunk","signal","aborted","setQueryData","prev","concat","push","getQueryData"],"sources":["D:/GitHub/expense-tracker/expense-tracker/node_modules/@tanstack/query-core/build/modern/streamedQuery.js"],"sourcesContent":["// src/streamedQuery.ts\nfunction streamedQuery({\n  queryFn,\n  refetchMode = \"reset\"\n}) {\n  return async (context) => {\n    const query = context.client.getQueryCache().find({ queryKey: context.queryKey, exact: true });\n    const isRefetch = !!query && query.state.data !== void 0;\n    if (isRefetch && refetchMode === \"reset\") {\n      query.setState({\n        status: \"pending\",\n        data: void 0,\n        error: null,\n        fetchStatus: \"fetching\"\n      });\n    }\n    const result = [];\n    const stream = await queryFn(context);\n    for await (const chunk of stream) {\n      if (context.signal.aborted) {\n        break;\n      }\n      if (!isRefetch || refetchMode !== \"replace\") {\n        context.client.setQueryData(\n          context.queryKey,\n          (prev = []) => {\n            return prev.concat([chunk]);\n          }\n        );\n      }\n      result.push(chunk);\n    }\n    if (isRefetch && refetchMode === \"replace\" && !context.signal.aborted) {\n      context.client.setQueryData(context.queryKey, result);\n    }\n    return context.client.getQueryData(context.queryKey);\n  };\n}\nexport {\n  streamedQuery\n};\n//# sourceMappingURL=streamedQuery.js.map"],"mappings":"AAAA;AACA,SAASA,aAAaA,CAAC;EACrBC,OAAO;EACPC,WAAW,GAAG;AAChB,CAAC,EAAE;EACD,OAAO,MAAOC,OAAO,IAAK;IACxB,MAAMC,KAAK,GAAGD,OAAO,CAACE,MAAM,CAACC,aAAa,CAAC,CAAC,CAACC,IAAI,CAAC;MAAEC,QAAQ,EAAEL,OAAO,CAACK,QAAQ;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;IAC9F,MAAMC,SAAS,GAAG,CAAC,CAACN,KAAK,IAAIA,KAAK,CAACO,KAAK,CAACC,IAAI,KAAK,KAAK,CAAC;IACxD,IAAIF,SAAS,IAAIR,WAAW,KAAK,OAAO,EAAE;MACxCE,KAAK,CAACS,QAAQ,CAAC;QACbC,MAAM,EAAE,SAAS;QACjBF,IAAI,EAAE,KAAK,CAAC;QACZG,KAAK,EAAE,IAAI;QACXC,WAAW,EAAE;MACf,CAAC,CAAC;IACJ;IACA,MAAMC,MAAM,GAAG,EAAE;IACjB,MAAMC,MAAM,GAAG,MAAMjB,OAAO,CAACE,OAAO,CAAC;IACrC,WAAW,MAAMgB,KAAK,IAAID,MAAM,EAAE;MAChC,IAAIf,OAAO,CAACiB,MAAM,CAACC,OAAO,EAAE;QAC1B;MACF;MACA,IAAI,CAACX,SAAS,IAAIR,WAAW,KAAK,SAAS,EAAE;QAC3CC,OAAO,CAACE,MAAM,CAACiB,YAAY,CACzBnB,OAAO,CAACK,QAAQ,EAChB,CAACe,IAAI,GAAG,EAAE,KAAK;UACb,OAAOA,IAAI,CAACC,MAAM,CAAC,CAACL,KAAK,CAAC,CAAC;QAC7B,CACF,CAAC;MACH;MACAF,MAAM,CAACQ,IAAI,CAACN,KAAK,CAAC;IACpB;IACA,IAAIT,SAAS,IAAIR,WAAW,KAAK,SAAS,IAAI,CAACC,OAAO,CAACiB,MAAM,CAACC,OAAO,EAAE;MACrElB,OAAO,CAACE,MAAM,CAACiB,YAAY,CAACnB,OAAO,CAACK,QAAQ,EAAES,MAAM,CAAC;IACvD;IACA,OAAOd,OAAO,CAACE,MAAM,CAACqB,YAAY,CAACvB,OAAO,CAACK,QAAQ,CAAC;EACtD,CAAC;AACH;AACA,SACER,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}