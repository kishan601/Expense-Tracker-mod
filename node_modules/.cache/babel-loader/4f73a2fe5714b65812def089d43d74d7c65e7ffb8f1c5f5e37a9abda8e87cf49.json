{"ast":null,"code":"var _jsxFileName = \"D:\\\\GitHub\\\\expense-tracker\\\\expense-tracker\\\\src\\\\pages\\\\Home.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { format } from 'date-fns';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { loadDataFromLocalStorage, saveDataToLocalStorage } from '../lib/storage';\nimport DashboardHeader from '../components/DashboardHeader';\nimport WalletCard from '../components/WalletCard';\nimport ExpenseCard from '../components/ExpenseCard';\nimport BudgetCard from '../components/BudgetCard';\nimport TransactionList from '../components/TransactionList';\nimport TopExpensesChart from '../components/TopExpensesChart';\nimport AddExpenseModal from '../components/modals/AddExpenseModal';\nimport AddIncomeModal from '../components/modals/AddIncomeModal';\nimport EditExpenseModal from '../components/modals/EditExpenseModal';\nimport './Home.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Home({\n  darkMode,\n  setDarkMode\n}) {\n  _s();\n  const [isLoading, setIsLoading] = useState(true);\n  const [wallet, setWallet] = useState({\n    id: 1,\n    balance: \"2000\"\n  });\n  const [expenses, setExpenses] = useState([]);\n  const [showAddExpenseModal, setShowAddExpenseModal] = useState(false);\n  const [showAddIncomeModal, setShowAddIncomeModal] = useState(false);\n  const [showEditExpenseModal, setShowEditExpenseModal] = useState(false);\n  const [currentExpense, setCurrentExpense] = useState(null);\n\n  // Budget settings\n  const monthlyBudget = 8000;\n  const savingsGoal = 15000;\n\n  // Load initial data\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Try to load from localStorage first as a fallback\n        const localData = loadDataFromLocalStorage();\n        if (localData) {\n          setWallet(localData.wallet);\n          setExpenses(localData.expenses);\n        }\n\n        // Then try to fetch from API\n        try {\n          const walletResponse = await fetch('/api/wallet');\n          const expensesResponse = await fetch('/api/expenses');\n          if (walletResponse.ok && expensesResponse.ok) {\n            const walletData = await walletResponse.json();\n            const expensesData = await expensesResponse.json();\n            setWallet(walletData);\n            setExpenses(expensesData);\n\n            // Save to localStorage for offline use\n            saveDataToLocalStorage({\n              wallet: walletData,\n              expenses: expensesData\n            });\n          }\n        } catch (apiError) {\n          console.error(\"API error:\", apiError);\n          // API failed but we already loaded from localStorage if available\n        }\n      } catch (error) {\n        console.error(\"Error loading data:\", error);\n        toast.error(\"Failed to load data\");\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // Add income handler\n  const handleAddIncome = async amount => {\n    try {\n      // First update local state optimistically\n      const newBalance = parseFloat(wallet.balance) + amount;\n      const updatedWallet = {\n        ...wallet,\n        balance: newBalance.toString()\n      };\n      setWallet(updatedWallet);\n\n      // Save to localStorage\n      saveDataToLocalStorage({\n        wallet: updatedWallet,\n        expenses\n      });\n\n      // Then try API\n      try {\n        const response = await fetch('/api/wallet/income', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            amount\n          })\n        });\n        if (response.ok) {\n          const serverWallet = await response.json();\n          setWallet(serverWallet);\n          saveDataToLocalStorage({\n            wallet: serverWallet,\n            expenses\n          });\n        }\n      } catch (apiError) {\n        console.error(\"API error when adding income:\", apiError);\n      }\n      toast.success(\"Income added successfully\");\n    } catch (error) {\n      console.error(\"Error adding income:\", error);\n      toast.error(\"Failed to add income\");\n    }\n  };\n\n  // Add expense handler\n  const handleAddExpense = async data => {\n    try {\n      // Create a new expense with temporary ID\n      const newExpense = {\n        id: Date.now(),\n        // temp ID\n        ...data,\n        amount: parseFloat(data.amount),\n        created_at: new Date()\n      };\n\n      // Update state optimistically\n      setExpenses(prev => [newExpense, ...prev]);\n\n      // Update wallet balance\n      const newBalance = parseFloat(wallet.balance) - parseFloat(data.amount);\n      if (newBalance < 0) {\n        toast.error(\"Insufficient funds in wallet\");\n        setExpenses(prev => prev.filter(e => e.id !== newExpense.id));\n        return;\n      }\n      const updatedWallet = {\n        ...wallet,\n        balance: newBalance.toString()\n      };\n      setWallet(updatedWallet);\n\n      // Save to localStorage\n      saveDataToLocalStorage({\n        wallet: updatedWallet,\n        expenses: [newExpense, ...expenses]\n      });\n\n      // Then try API\n      try {\n        const response = await fetch('/api/expenses', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(data)\n        });\n        if (response.ok) {\n          const serverExpense = await response.json();\n\n          // Replace temp expense with server one\n          setExpenses(prev => prev.map(e => e.id === newExpense.id ? serverExpense : e));\n\n          // Get updated wallet from server\n          const walletResponse = await fetch('/api/wallet');\n          if (walletResponse.ok) {\n            const serverWallet = await walletResponse.json();\n            setWallet(serverWallet);\n\n            // Update localStorage\n            saveDataToLocalStorage({\n              wallet: serverWallet,\n              expenses: expenses.map(e => e.id === newExpense.id ? serverExpense : e)\n            });\n          }\n        } else {\n          // Revert changes if API fails\n          setExpenses(prev => prev.filter(e => e.id !== newExpense.id));\n          setWallet(wallet);\n          const errorData = await response.json();\n          throw new Error(errorData.message || 'Failed to add expense');\n        }\n      } catch (apiError) {\n        console.error(\"API error when adding expense:\", apiError);\n      }\n      toast.success(\"Expense added successfully\");\n    } catch (error) {\n      console.error(\"Error adding expense:\", error);\n      toast.error(error.message || \"Failed to add expense\");\n    }\n  };\n\n  // Edit expense handler\n  const handleEditExpense = expense => {\n    setCurrentExpense(expense);\n    setShowEditExpenseModal(true);\n  };\n\n  // Update expense handler\n  const handleUpdateExpense = async (id, data) => {\n    try {\n      // Find the expense to update\n      const expenseToUpdate = expenses.find(e => e.id === id);\n      if (!expenseToUpdate) {\n        toast.error(\"Expense not found\");\n        return;\n      }\n\n      // Calculate wallet balance change\n      const oldAmount = parseFloat(expenseToUpdate.amount);\n      const newAmount = parseFloat(data.amount || oldAmount);\n      const amountDiff = oldAmount - newAmount;\n\n      // Create updated expense\n      const updatedExpense = {\n        ...expenseToUpdate,\n        ...data\n      };\n\n      // Update state optimistically\n      setExpenses(prev => prev.map(expense => expense.id === id ? updatedExpense : expense));\n\n      // Update wallet if amount changed\n      if (amountDiff !== 0) {\n        const newBalance = parseFloat(wallet.balance) + amountDiff;\n        if (newBalance < 0) {\n          toast.error(\"Insufficient funds in wallet\");\n          setExpenses(prev => prev.map(expense => expense.id === id ? expenseToUpdate : expense));\n          return;\n        }\n        const updatedWallet = {\n          ...wallet,\n          balance: newBalance.toString()\n        };\n        setWallet(updatedWallet);\n\n        // Save to localStorage\n        saveDataToLocalStorage({\n          wallet: updatedWallet,\n          expenses: expenses.map(expense => expense.id === id ? updatedExpense : expense)\n        });\n      }\n\n      // Then try API\n      try {\n        const response = await fetch(`/api/expenses/${id}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(data)\n        });\n        if (response.ok) {\n          const serverExpense = await response.json();\n\n          // Update with server data\n          setExpenses(prev => prev.map(e => e.id === id ? serverExpense : e));\n\n          // Get updated wallet from server\n          const walletResponse = await fetch('/api/wallet');\n          if (walletResponse.ok) {\n            const serverWallet = await walletResponse.json();\n            setWallet(serverWallet);\n\n            // Update localStorage\n            saveDataToLocalStorage({\n              wallet: serverWallet,\n              expenses: expenses.map(e => e.id === id ? serverExpense : e)\n            });\n          }\n        }\n      } catch (apiError) {\n        console.error(\"API error when updating expense:\", apiError);\n      }\n      toast.success(\"Expense updated successfully\");\n    } catch (error) {\n      console.error(\"Error updating expense:\", error);\n      toast.error(error.message || \"Failed to update expense\");\n    }\n  };\n\n  // Delete expense handler\n  const handleDeleteExpense = async id => {\n    try {\n      // Find the expense to delete\n      const expenseToDelete = expenses.find(e => e.id === id);\n      if (!expenseToDelete) {\n        toast.error(\"Expense not found\");\n        return;\n      }\n\n      // Update state optimistically\n      setExpenses(prev => prev.filter(expense => expense.id !== id));\n\n      // Restore amount to wallet\n      const newBalance = parseFloat(wallet.balance) + parseFloat(expenseToDelete.amount);\n      const updatedWallet = {\n        ...wallet,\n        balance: newBalance.toString()\n      };\n      setWallet(updatedWallet);\n\n      // Save to localStorage\n      saveDataToLocalStorage({\n        wallet: updatedWallet,\n        expenses: expenses.filter(expense => expense.id !== id)\n      });\n\n      // Then try API\n      try {\n        const response = await fetch(`/api/expenses/${id}`, {\n          method: 'DELETE'\n        });\n        if (response.ok) {\n          // Get updated wallet from server\n          const walletResponse = await fetch('/api/wallet');\n          if (walletResponse.ok) {\n            const serverWallet = await walletResponse.json();\n            setWallet(serverWallet);\n\n            // Update localStorage\n            saveDataToLocalStorage({\n              wallet: serverWallet,\n              expenses: expenses.filter(expense => expense.id !== id)\n            });\n          }\n        }\n      } catch (apiError) {\n        console.error(\"API error when deleting expense:\", apiError);\n      }\n      toast.success(\"Expense deleted successfully\");\n    } catch (error) {\n      console.error(\"Error deleting expense:\", error);\n      toast.error(\"Failed to delete expense\");\n    }\n  };\n\n  // Calculate total expenses\n  const totalExpenses = expenses.reduce((sum, expense) => sum + parseFloat(expense.amount), 0);\n\n  // Format current date\n  const currentDate = format(new Date(), 'EEEE, MMMM d, yyyy • h:mm a');\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-container\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-header-separator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DashboardHeader, {\n      title: \"Expense Tracker\",\n      date: currentDate,\n      onAddExpense: () => setShowAddExpenseModal(true),\n      onAddIncome: () => setShowAddIncomeModal(true),\n      darkMode: darkMode,\n      setDarkMode: setDarkMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-grid\",\n      children: [/*#__PURE__*/_jsxDEV(WalletCard, {\n        balance: wallet.balance,\n        spent: totalExpenses,\n        available: parseFloat(wallet.balance) - totalExpenses,\n        savingsGoal: savingsGoal,\n        onAddIncome: () => setShowAddIncomeModal(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ExpenseCard, {\n        totalExpenses: totalExpenses,\n        expenses: expenses,\n        onAddExpense: () => setShowAddExpenseModal(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BudgetCard, {\n        totalExpenses: totalExpenses,\n        monthlyBudget: monthlyBudget,\n        expenses: expenses\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transactions-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-header\",\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"card-title\",\n            children: \"Recent Transactions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 383,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-body\",\n          children: /*#__PURE__*/_jsxDEV(TransactionList, {\n            expenses: expenses,\n            onEdit: handleEditExpense,\n            onDelete: handleDeleteExpense\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-header\",\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"card-title\",\n            children: \"Top Expenses\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 396,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-body\",\n          children: /*#__PURE__*/_jsxDEV(TopExpensesChart, {\n            expenses: expenses\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 7\n    }, this), showAddExpenseModal && /*#__PURE__*/_jsxDEV(AddExpenseModal, {\n      onClose: () => setShowAddExpenseModal(false),\n      onAddExpense: data => {\n        handleAddExpense(data);\n        setShowAddExpenseModal(false);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 9\n    }, this), showAddIncomeModal && /*#__PURE__*/_jsxDEV(AddIncomeModal, {\n      onClose: () => setShowAddIncomeModal(false),\n      onAddIncome: amount => {\n        handleAddIncome(amount);\n        setShowAddIncomeModal(false);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 9\n    }, this), showEditExpenseModal && currentExpense && /*#__PURE__*/_jsxDEV(EditExpenseModal, {\n      expense: currentExpense,\n      onClose: () => {\n        setShowEditExpenseModal(false);\n        setCurrentExpense(null);\n      },\n      onUpdateExpense: data => {\n        handleUpdateExpense(currentExpense.id, data);\n        setShowEditExpenseModal(false);\n        setCurrentExpense(null);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {\n      position: \"bottom-right\",\n      theme: darkMode ? \"dark\" : \"light\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 345,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"H9F1C88OzJXv2dbjBZeZDZwRa9s=\");\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","format","ToastContainer","toast","loadDataFromLocalStorage","saveDataToLocalStorage","DashboardHeader","WalletCard","ExpenseCard","BudgetCard","TransactionList","TopExpensesChart","AddExpenseModal","AddIncomeModal","EditExpenseModal","jsxDEV","_jsxDEV","Home","darkMode","setDarkMode","_s","isLoading","setIsLoading","wallet","setWallet","id","balance","expenses","setExpenses","showAddExpenseModal","setShowAddExpenseModal","showAddIncomeModal","setShowAddIncomeModal","showEditExpenseModal","setShowEditExpenseModal","currentExpense","setCurrentExpense","monthlyBudget","savingsGoal","fetchData","localData","walletResponse","fetch","expensesResponse","ok","walletData","json","expensesData","apiError","console","error","handleAddIncome","amount","newBalance","parseFloat","updatedWallet","toString","response","method","headers","body","JSON","stringify","serverWallet","success","handleAddExpense","data","newExpense","Date","now","created_at","prev","filter","e","serverExpense","map","errorData","Error","message","handleEditExpense","expense","handleUpdateExpense","expenseToUpdate","find","oldAmount","newAmount","amountDiff","updatedExpense","handleDeleteExpense","expenseToDelete","totalExpenses","reduce","sum","currentDate","className","children","fileName","_jsxFileName","lineNumber","columnNumber","title","date","onAddExpense","onAddIncome","spent","available","onEdit","onDelete","onClose","onUpdateExpense","position","theme","_c","$RefreshReg$"],"sources":["D:/GitHub/expense-tracker/expense-tracker/src/pages/Home.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { format } from 'date-fns';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { loadDataFromLocalStorage, saveDataToLocalStorage } from '../lib/storage';\r\nimport DashboardHeader from '../components/DashboardHeader';\r\nimport WalletCard from '../components/WalletCard';\r\nimport ExpenseCard from '../components/ExpenseCard';\r\nimport BudgetCard from '../components/BudgetCard';\r\nimport TransactionList from '../components/TransactionList';\r\nimport TopExpensesChart from '../components/TopExpensesChart';\r\nimport AddExpenseModal from '../components/modals/AddExpenseModal';\r\nimport AddIncomeModal from '../components/modals/AddIncomeModal';\r\nimport EditExpenseModal from '../components/modals/EditExpenseModal';\r\nimport './Home.css';\r\n\r\nexport default function Home({ darkMode, setDarkMode }) {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [wallet, setWallet] = useState({ id: 1, balance: \"2000\" });\r\n  const [expenses, setExpenses] = useState([]);\r\n  const [showAddExpenseModal, setShowAddExpenseModal] = useState(false);\r\n  const [showAddIncomeModal, setShowAddIncomeModal] = useState(false);\r\n  const [showEditExpenseModal, setShowEditExpenseModal] = useState(false);\r\n  const [currentExpense, setCurrentExpense] = useState(null);\r\n  \r\n  // Budget settings\r\n  const monthlyBudget = 8000;\r\n  const savingsGoal = 15000;\r\n\r\n  // Load initial data\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        // Try to load from localStorage first as a fallback\r\n        const localData = loadDataFromLocalStorage();\r\n        if (localData) {\r\n          setWallet(localData.wallet);\r\n          setExpenses(localData.expenses);\r\n        }\r\n        \r\n        // Then try to fetch from API\r\n        try {\r\n          const walletResponse = await fetch('/api/wallet');\r\n          const expensesResponse = await fetch('/api/expenses');\r\n          \r\n          if (walletResponse.ok && expensesResponse.ok) {\r\n            const walletData = await walletResponse.json();\r\n            const expensesData = await expensesResponse.json();\r\n            \r\n            setWallet(walletData);\r\n            setExpenses(expensesData);\r\n            \r\n            // Save to localStorage for offline use\r\n            saveDataToLocalStorage({ wallet: walletData, expenses: expensesData });\r\n          }\r\n        } catch (apiError) {\r\n          console.error(\"API error:\", apiError);\r\n          // API failed but we already loaded from localStorage if available\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error loading data:\", error);\r\n        toast.error(\"Failed to load data\");\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchData();\r\n  }, []);\r\n\r\n  // Add income handler\r\n  const handleAddIncome = async (amount) => {\r\n    try {\r\n      // First update local state optimistically\r\n      const newBalance = parseFloat(wallet.balance) + amount;\r\n      const updatedWallet = { ...wallet, balance: newBalance.toString() };\r\n      setWallet(updatedWallet);\r\n      \r\n      // Save to localStorage\r\n      saveDataToLocalStorage({ wallet: updatedWallet, expenses });\r\n      \r\n      // Then try API\r\n      try {\r\n        const response = await fetch('/api/wallet/income', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ amount }),\r\n        });\r\n        \r\n        if (response.ok) {\r\n          const serverWallet = await response.json();\r\n          setWallet(serverWallet);\r\n          saveDataToLocalStorage({ wallet: serverWallet, expenses });\r\n        }\r\n      } catch (apiError) {\r\n        console.error(\"API error when adding income:\", apiError);\r\n      }\r\n      \r\n      toast.success(\"Income added successfully\");\r\n    } catch (error) {\r\n      console.error(\"Error adding income:\", error);\r\n      toast.error(\"Failed to add income\");\r\n    }\r\n  };\r\n\r\n  // Add expense handler\r\n  const handleAddExpense = async (data) => {\r\n    try {\r\n      // Create a new expense with temporary ID\r\n      const newExpense = {\r\n        id: Date.now(), // temp ID\r\n        ...data,\r\n        amount: parseFloat(data.amount),\r\n        created_at: new Date()\r\n      };\r\n      \r\n      // Update state optimistically\r\n      setExpenses(prev => [newExpense, ...prev]);\r\n      \r\n      // Update wallet balance\r\n      const newBalance = parseFloat(wallet.balance) - parseFloat(data.amount);\r\n      if (newBalance < 0) {\r\n        toast.error(\"Insufficient funds in wallet\");\r\n        setExpenses(prev => prev.filter(e => e.id !== newExpense.id));\r\n        return;\r\n      }\r\n      \r\n      const updatedWallet = { ...wallet, balance: newBalance.toString() };\r\n      setWallet(updatedWallet);\r\n      \r\n      // Save to localStorage\r\n      saveDataToLocalStorage({ \r\n        wallet: updatedWallet, \r\n        expenses: [newExpense, ...expenses] \r\n      });\r\n      \r\n      // Then try API\r\n      try {\r\n        const response = await fetch('/api/expenses', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(data),\r\n        });\r\n        \r\n        if (response.ok) {\r\n          const serverExpense = await response.json();\r\n          \r\n          // Replace temp expense with server one\r\n          setExpenses(prev => \r\n            prev.map(e => e.id === newExpense.id ? serverExpense : e)\r\n          );\r\n          \r\n          // Get updated wallet from server\r\n          const walletResponse = await fetch('/api/wallet');\r\n          if (walletResponse.ok) {\r\n            const serverWallet = await walletResponse.json();\r\n            setWallet(serverWallet);\r\n            \r\n            // Update localStorage\r\n            saveDataToLocalStorage({ \r\n              wallet: serverWallet, \r\n              expenses: expenses.map(e => e.id === newExpense.id ? serverExpense : e)\r\n            });\r\n          }\r\n        } else {\r\n          // Revert changes if API fails\r\n          setExpenses(prev => prev.filter(e => e.id !== newExpense.id));\r\n          setWallet(wallet);\r\n          const errorData = await response.json();\r\n          throw new Error(errorData.message || 'Failed to add expense');\r\n        }\r\n      } catch (apiError) {\r\n        console.error(\"API error when adding expense:\", apiError);\r\n      }\r\n      \r\n      toast.success(\"Expense added successfully\");\r\n    } catch (error) {\r\n      console.error(\"Error adding expense:\", error);\r\n      toast.error(error.message || \"Failed to add expense\");\r\n    }\r\n  };\r\n\r\n  // Edit expense handler\r\n  const handleEditExpense = (expense) => {\r\n    setCurrentExpense(expense);\r\n    setShowEditExpenseModal(true);\r\n  };\r\n\r\n  // Update expense handler\r\n  const handleUpdateExpense = async (id, data) => {\r\n    try {\r\n      // Find the expense to update\r\n      const expenseToUpdate = expenses.find(e => e.id === id);\r\n      if (!expenseToUpdate) {\r\n        toast.error(\"Expense not found\");\r\n        return;\r\n      }\r\n      \r\n      // Calculate wallet balance change\r\n      const oldAmount = parseFloat(expenseToUpdate.amount);\r\n      const newAmount = parseFloat(data.amount || oldAmount);\r\n      const amountDiff = oldAmount - newAmount;\r\n      \r\n      // Create updated expense\r\n      const updatedExpense = { ...expenseToUpdate, ...data };\r\n      \r\n      // Update state optimistically\r\n      setExpenses(prev => \r\n        prev.map(expense => expense.id === id ? updatedExpense : expense)\r\n      );\r\n      \r\n      // Update wallet if amount changed\r\n      if (amountDiff !== 0) {\r\n        const newBalance = parseFloat(wallet.balance) + amountDiff;\r\n        if (newBalance < 0) {\r\n          toast.error(\"Insufficient funds in wallet\");\r\n          setExpenses(prev => \r\n            prev.map(expense => expense.id === id ? expenseToUpdate : expense)\r\n          );\r\n          return;\r\n        }\r\n        \r\n        const updatedWallet = { ...wallet, balance: newBalance.toString() };\r\n        setWallet(updatedWallet);\r\n        \r\n        // Save to localStorage\r\n        saveDataToLocalStorage({ \r\n          wallet: updatedWallet, \r\n          expenses: expenses.map(expense => \r\n            expense.id === id ? updatedExpense : expense\r\n          ) \r\n        });\r\n      }\r\n      \r\n      // Then try API\r\n      try {\r\n        const response = await fetch(`/api/expenses/${id}`, {\r\n          method: 'PUT',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(data),\r\n        });\r\n        \r\n        if (response.ok) {\r\n          const serverExpense = await response.json();\r\n          \r\n          // Update with server data\r\n          setExpenses(prev => \r\n            prev.map(e => e.id === id ? serverExpense : e)\r\n          );\r\n          \r\n          // Get updated wallet from server\r\n          const walletResponse = await fetch('/api/wallet');\r\n          if (walletResponse.ok) {\r\n            const serverWallet = await walletResponse.json();\r\n            setWallet(serverWallet);\r\n            \r\n            // Update localStorage\r\n            saveDataToLocalStorage({ \r\n              wallet: serverWallet, \r\n              expenses: expenses.map(e => e.id === id ? serverExpense : e)\r\n            });\r\n          }\r\n        }\r\n      } catch (apiError) {\r\n        console.error(\"API error when updating expense:\", apiError);\r\n      }\r\n      \r\n      toast.success(\"Expense updated successfully\");\r\n    } catch (error) {\r\n      console.error(\"Error updating expense:\", error);\r\n      toast.error(error.message || \"Failed to update expense\");\r\n    }\r\n  };\r\n\r\n  // Delete expense handler\r\n  const handleDeleteExpense = async (id) => {\r\n    try {\r\n      // Find the expense to delete\r\n      const expenseToDelete = expenses.find(e => e.id === id);\r\n      if (!expenseToDelete) {\r\n        toast.error(\"Expense not found\");\r\n        return;\r\n      }\r\n      \r\n      // Update state optimistically\r\n      setExpenses(prev => prev.filter(expense => expense.id !== id));\r\n      \r\n      // Restore amount to wallet\r\n      const newBalance = parseFloat(wallet.balance) + parseFloat(expenseToDelete.amount);\r\n      const updatedWallet = { ...wallet, balance: newBalance.toString() };\r\n      setWallet(updatedWallet);\r\n      \r\n      // Save to localStorage\r\n      saveDataToLocalStorage({ \r\n        wallet: updatedWallet, \r\n        expenses: expenses.filter(expense => expense.id !== id) \r\n      });\r\n      \r\n      // Then try API\r\n      try {\r\n        const response = await fetch(`/api/expenses/${id}`, {\r\n          method: 'DELETE',\r\n        });\r\n        \r\n        if (response.ok) {\r\n          // Get updated wallet from server\r\n          const walletResponse = await fetch('/api/wallet');\r\n          if (walletResponse.ok) {\r\n            const serverWallet = await walletResponse.json();\r\n            setWallet(serverWallet);\r\n            \r\n            // Update localStorage\r\n            saveDataToLocalStorage({ \r\n              wallet: serverWallet, \r\n              expenses: expenses.filter(expense => expense.id !== id)\r\n            });\r\n          }\r\n        }\r\n      } catch (apiError) {\r\n        console.error(\"API error when deleting expense:\", apiError);\r\n      }\r\n      \r\n      toast.success(\"Expense deleted successfully\");\r\n    } catch (error) {\r\n      console.error(\"Error deleting expense:\", error);\r\n      toast.error(\"Failed to delete expense\");\r\n    }\r\n  };\r\n\r\n  // Calculate total expenses\r\n  const totalExpenses = expenses.reduce((sum, expense) => sum + parseFloat(expense.amount), 0);\r\n\r\n  // Format current date\r\n  const currentDate = format(new Date(), 'EEEE, MMMM d, yyyy • h:mm a');\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"loading-container\">\r\n        <p>Loading...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      {/* App Header with separator */}\r\n      <div className=\"app-header-separator\"></div>\r\n      <DashboardHeader \r\n        title=\"Expense Tracker\" \r\n        date={currentDate}\r\n        onAddExpense={() => setShowAddExpenseModal(true)}\r\n        onAddIncome={() => setShowAddIncomeModal(true)}\r\n        darkMode={darkMode}\r\n        setDarkMode={setDarkMode}\r\n      />\r\n      \r\n      {/* Main Dashboard Grid - Fixed with explicit grid layout */}\r\n      <div className=\"dashboard-grid\">\r\n        <WalletCard \r\n          balance={wallet.balance} \r\n          spent={totalExpenses}\r\n          available={parseFloat(wallet.balance) - totalExpenses}\r\n          savingsGoal={savingsGoal}\r\n          onAddIncome={() => setShowAddIncomeModal(true)}\r\n        />\r\n        \r\n        <ExpenseCard \r\n          totalExpenses={totalExpenses} \r\n          expenses={expenses}\r\n          onAddExpense={() => setShowAddExpenseModal(true)}\r\n        />\r\n        \r\n        <BudgetCard \r\n          totalExpenses={totalExpenses}\r\n          monthlyBudget={monthlyBudget}\r\n          expenses={expenses}\r\n        />\r\n      </div>\r\n      {/* Transactions and Top Expenses - Fixed layout */}\r\n      <div className=\"transactions-grid\">\r\n        <div className=\"card\">\r\n          <div className=\"card-header\">\r\n            <h2 className=\"card-title\">Recent Transactions</h2>\r\n          </div>\r\n          <div className=\"card-body\">\r\n            <TransactionList\r\n              expenses={expenses}\r\n              onEdit={handleEditExpense}\r\n              onDelete={handleDeleteExpense}\r\n            />\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"card\">\r\n          <div className=\"card-header\">\r\n            <h2 className=\"card-title\">Top Expenses</h2>\r\n          </div>\r\n          <div className=\"card-body\">\r\n            <TopExpensesChart expenses={expenses} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* Modals */}\r\n      {showAddExpenseModal && (\r\n        <AddExpenseModal\r\n          onClose={() => setShowAddExpenseModal(false)}\r\n          onAddExpense={(data) => {\r\n            handleAddExpense(data);\r\n            setShowAddExpenseModal(false);\r\n          }}\r\n        />\r\n      )}\r\n      {showAddIncomeModal && (\r\n        <AddIncomeModal\r\n          onClose={() => setShowAddIncomeModal(false)}\r\n          onAddIncome={(amount) => {\r\n            handleAddIncome(amount);\r\n            setShowAddIncomeModal(false);\r\n          }}\r\n        />\r\n      )}\r\n      {showEditExpenseModal && currentExpense && (\r\n        <EditExpenseModal\r\n          expense={currentExpense}\r\n          onClose={() => {\r\n            setShowEditExpenseModal(false);\r\n            setCurrentExpense(null);\r\n          }}\r\n          onUpdateExpense={(data) => {\r\n            handleUpdateExpense(currentExpense.id, data);\r\n            setShowEditExpenseModal(false);\r\n            setCurrentExpense(null);\r\n          }}\r\n        />\r\n      )}\r\n      <ToastContainer position=\"bottom-right\" theme={darkMode ? \"dark\" : \"light\"} />\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}